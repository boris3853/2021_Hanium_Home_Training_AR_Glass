// Generated by gencpp from file msg_creator/Keypoints.msg
// DO NOT EDIT!


#ifndef MSG_CREATOR_MESSAGE_KEYPOINTS_H
#define MSG_CREATOR_MESSAGE_KEYPOINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_creator
{
template <class ContainerAllocator>
struct Keypoints_
{
  typedef Keypoints_<ContainerAllocator> Type;

  Keypoints_()
    : x()
    , y()
    , z()
    , IsTrue()  {
      x.assign(0.0);

      y.assign(0.0);

      z.assign(0.0);

      IsTrue.assign(0.0);
  }
  Keypoints_(const ContainerAllocator& _alloc)
    : x()
    , y()
    , z()
    , IsTrue()  {
  (void)_alloc;
      x.assign(0.0);

      y.assign(0.0);

      z.assign(0.0);

      IsTrue.assign(0.0);
  }



   typedef boost::array<double, 25>  _x_type;
  _x_type x;

   typedef boost::array<double, 25>  _y_type;
  _y_type y;

   typedef boost::array<double, 25>  _z_type;
  _z_type z;

   typedef boost::array<double, 25>  _IsTrue_type;
  _IsTrue_type IsTrue;





  typedef boost::shared_ptr< ::msg_creator::Keypoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_creator::Keypoints_<ContainerAllocator> const> ConstPtr;

}; // struct Keypoints_

typedef ::msg_creator::Keypoints_<std::allocator<void> > Keypoints;

typedef boost::shared_ptr< ::msg_creator::Keypoints > KeypointsPtr;
typedef boost::shared_ptr< ::msg_creator::Keypoints const> KeypointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_creator::Keypoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_creator::Keypoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace msg_creator

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'msg_creator': ['/home/nvidia/21_hf271/TX2_main/src/msg_creator/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::msg_creator::Keypoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_creator::Keypoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_creator::Keypoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_creator::Keypoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_creator::Keypoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_creator::Keypoints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_creator::Keypoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca61976b7747333c168cedac9b79b953";
  }

  static const char* value(const ::msg_creator::Keypoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xca61976b7747333cULL;
  static const uint64_t static_value2 = 0x168cedac9b79b953ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_creator::Keypoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_creator/Keypoints";
  }

  static const char* value(const ::msg_creator::Keypoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_creator::Keypoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[25] x\n\
float64[25] y\n\
float64[25] z\n\
float64[25] IsTrue\n\
";
  }

  static const char* value(const ::msg_creator::Keypoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_creator::Keypoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.IsTrue);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Keypoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_creator::Keypoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_creator::Keypoints_<ContainerAllocator>& v)
  {
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "z[]" << std::endl;
    for (size_t i = 0; i < v.z.size(); ++i)
    {
      s << indent << "  z[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.z[i]);
    }
    s << indent << "IsTrue[]" << std::endl;
    for (size_t i = 0; i < v.IsTrue.size(); ++i)
    {
      s << indent << "  IsTrue[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.IsTrue[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_CREATOR_MESSAGE_KEYPOINTS_H
